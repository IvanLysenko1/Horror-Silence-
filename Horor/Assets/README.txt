ФИО
Лысенко Иван Алексеевич

Краткая техническая документация проекта
Проект: 
Прототип хоррор-игры "Тишина

Архитектура проекта:
1. Основные компоненты и классы:

PlayerInput
Управляет вводом игрока, обрабатывая команды с клавиатуры и мыши. 
Централизует ввод для всех взаимодействий (движение, прыжки, включение фонарика).

PlayerMovement
Управляет передвижением игрока по сцене, реализует механику ходьбы и прыжков. 
Содержит физические параметры игрока, такие как скорость и сила прыжка.

CameraController
Управляет вращением камеры на основе ввода с мыши, создавая эффект оглядывания и контроля камеры от первого лица.

FlashlightController
Управляет включением и выключением фонарика, используя ввод игрока. 
Включает/выключает объект света в сцене.

GlobalStringVars
Содержит строковые константы для имен ввода и других ключевых переменных. 
Помогает избежать хардкода в проекте, делая код более читабельным и легко поддерживаемым.

2. Механики и системы:
Движение игрока
Реализовано через компонент PlayerMovement, который получает данные о движении и прыжках от PlayerInput. 
Используется физический движок Unity через Rigidbody для реалистичного передвижения и прыжков.

Управление камерой
Компонент CameraController управляет вращением камеры на основе данных от мыши. 
Камера следит за положением игрока, создавая эффект вида от первого лица.

Фонарик
Компонент FlashlightController управляет объектом света, который включается/выключается по нажатию клавиши (например, F). 
Переключение производится через логику, реализованную в PlayerInput.

Звуковые эффекты
Реализовано проигрывание звуков шагов и других аудиальных событий при взаимодействии с триггерами. 
Звуки привязаны к движениям или событиям через аудио-компоненты и триггеры.

Освещение
Используется динамическое освещение: фонарик и мигающие лампы.
Световые объекты контролируются игровыми скриптами для создания эффекта напряжения и неожиданности.

UI (Меню)
Присутствует базовое меню, через которое можно начать игру

3. Структура проекта:

Scripts:
Папка, содержащая все скрипты проекта, разбитая на подпапки по назначению:
Player: скрипты управления игроком (движение, камера, фонарик).
UI: скрипты для работы с пользовательским интерфейсом.
Audio: управление звуковыми эффектами.

Prefabs:
Папка с префабами, используемыми в игре. Например, фонарик, объекты окружающей среды и другие игровые элементы:
Flash: префабы фонарика
FPS: префаб контроллера от первого лица
Ghost: префаб призрака

Scenes:
Папка, в которой хранятся игровые сцены. 
Главная сцена — это основное игровое пространство с камерой, игроком и различными объектами, такими как триггеры для анимаций и звуков.
Стартовое меню - это первая сцена с кнопкой запуска игры. 

Sounds:
Папка с аудиофайлами (звуки шагов, героя, фонаря, окружающие звуки), которые используются в проекте.
Environment: звуки окружение и пугающие звуки
Equipment: звуки фонаря
Man: звуки главного героя
Steps: звуки шагов

Effect: 
папка с VFX-эффектами (эффект тумана)

Terrain: 
папка с Террейн-слоями и текстурами для них
Ground: папка с текстурами и слоем для земли
GroundDirt: папка с текстурами и слоем для грязи
Forest - рельеф

AssetStore: папка с ассетами с assetStore

4. Файлы конфигурации и настройки:
.gitignore
Конфигурационный файл для Git, который исключает из репозитория временные и автоматически генерируемые файлы 
(например, библиотеки, кеши сборок и файлы системы сборки Unity).

ReadMe.txt
Текстовый файл, в котором указаны имя разработчика и краткая информация о проекте.

5. Используемые ассеты и ресурсы:

Примитивы Unity для объектов окружения и
Бесплатные ассеты для моделей,текстур и аудиофайлов:
TextMesh Pro 
Survival Tools 
GrassFlowers
Conifers [BOTD]
PillarsPack
Horror Game Essentials
Модель и анимации с Mixamo

Расширяемость проекта:
Модульная структура:
Все компоненты разделены по логическим блокам, что упрощает расширение функционала (например, добавление новых взаимодействий, звуков или механик).

Гибкая система ввода:
Весь ввод сосредоточен в PlayerInput, что упрощает изменение и добавление новых действий. Input Manager позволяет быстро менять назначения клавиш без изменения кода.

Отдельные классы для каждой задачи:
Четкое разделение ответственности между классами (PlayerMovement, CameraController, FlashlightController) делает код более читабельным и легко поддерживаемым.


